[uwsgi]
# ============================================
# CyborX Auto Redeem Tool - uWSGI Configuration
# ============================================
# 
# This configuration is optimized for:
# - Single process deployment (session consistency)
# - Multi-threaded execution (concurrent requests)
# - Long-running requests (redeem operations)
# - Real-time progress updates (AJAX polling)
#
# Usage:
#   uwsgi --ini uwsgi.ini
#
# Or with systemd:
#   systemctl start cyborx-redeem
# ============================================

# Application
# ============================================
module = app:app
callable = app
chdir = /path/to/autoredeem

# Python
# ============================================
# Uncomment if using virtual environment
# virtualenv = /path/to/venv
# pythonpath = /path/to/autoredeem

# Server Configuration
# ============================================
# HTTP mode (direct access without nginx)
http = 0.0.0.0:8080

# Or use socket mode (with nginx)
# socket = 127.0.0.1:8080
# socket = /tmp/cyborx-redeem.sock
# chmod-socket = 664

# Process & Threading
# ============================================
# CRITICAL: Use single process for session consistency!
# Multiple processes will cause session data to be lost
# between worker processes, breaking progress tracking
processes = 1

# Number of threads per process
# Each thread handles one request concurrently
threads = 4

# Enable threading (REQUIRED!)
enable-threads = true

# Master process
master = true

# Vacuum on exit (clean up)
vacuum = true

# Die on SIGTERM (for graceful shutdown)
die-on-term = true

# Timeouts
# ============================================
# HTTP timeout (5 minutes for long operations)
http-timeout = 300

# Socket timeout
socket-timeout = 300

# Harakiri timeout (kill worker after 5 minutes)
# Set high to allow long redeem operations
harakiri = 300

# Request timeout
request-timeout = 300

# Buffering
# ============================================
# Post buffering (4KB - small for real-time updates)
post-buffering = 4096

# Disable request buffering for real-time responses
# http-auto-chunked = true
# http-keepalive = true

# Memory & Performance
# ============================================
# Maximum request size (10MB)
limit-post = 10485760

# Buffer size
buffer-size = 32768

# Reload when memory usage exceeds (512MB)
reload-on-rss = 512

# Thunder lock (prevent thundering herd)
thunder-lock = true

# Logging
# ============================================
# Log file location
logto = /var/log/uwsgi/cyborx-redeem.log

# Or log to stdout (for systemd)
# logto = -

# Log format
log-date = %%Y-%%m-%%d %%H:%%M:%%S

# Log request details
log-4xx = true
log-5xx = true

# Disable logging of static files
# route-uri = ^/static/.* log:

# Log size rotation (50MB)
log-maxsize = 52428800

# Log rotation
log-backupname = /var/log/uwsgi/cyborx-redeem.log.old

# Security
# ============================================
# Drop privileges after binding to port
# uid = www-data
# gid = www-data

# Limit post size
# post-buffering = 4096

# Workers Management
# ============================================
# Max number of requests per worker (reload worker)
max-requests = 5000

# Reload worker on memory leak
reload-on-as = 512

# Respawn processes taking more than N seconds
harakiri-verbose = true

# Static Files (if serving directly)
# ============================================
# Serve static files directly (optional)
# static-map = /static=/path/to/autoredeem/static
# static-expires = /* 3600

# Health & Monitoring
# ============================================
# Stats server (for monitoring)
# stats = 127.0.0.1:9191
# stats-http = true

# Ping endpoint for health checks
# route = ^/ping$ break:200:PONG

# Advanced Options
# ============================================
# Offload blocking calls to threads
# offload-threads = 2

# Cheaper mode (dynamic worker scaling) - NOT RECOMMENDED for single process
# cheaper = 1
# cheaper-initial = 1
# cheaper-step = 1

# Die on app load failure
need-app = true

# Do not kill workers on reload
# touch-reload = /path/to/autoredeem/app.py

# Environment Variables
# ============================================
# Set environment variables
# env = FLASK_ENV=production
# env = SECRET_KEY=your_secret_key_here
# env = DEBUG=False

# Additional Notes
# ============================================
# 
# IMPORTANT SETTINGS FOR THIS APP:
# 
# 1. processes = 1 (CRITICAL!)
#    - Flask uses in-memory session storage
#    - Multiple processes = session data not shared
#    - Real-time progress tracking will break
#
# 2. threads = 4 (RECOMMENDED)
#    - Allows concurrent AJAX requests
#    - One thread for redeem, others for status checks
#    - Increase to 8-16 for high traffic
#
# 3. enable-threads = true (REQUIRED!)
#    - Without this, Flask can't handle concurrent requests
#    - Progress updates won't work
#
# 4. High timeouts (300s)
#    - Redeeming many codes takes time
#    - Prevents worker kill during operation
#
# 5. Small post-buffering (4KB)
#    - Allows real-time response streaming
#    - Better for AJAX polling
#
# TROUBLESHOOTING:
# 
# Problem: Progress not updating in UI
# Solution: Check processes=1, threads enabled, timeouts high
#
# Problem: Worker killed during redeem
# Solution: Increase harakiri timeout (600s+)
#
# Problem: High memory usage
# Solution: Reduce max-requests, add reload-on-rss
#
# Problem: Slow response
# Solution: Increase threads (8-16)
#
# ============================================
